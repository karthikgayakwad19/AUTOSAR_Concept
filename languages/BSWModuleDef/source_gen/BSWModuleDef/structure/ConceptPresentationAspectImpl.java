package BSWModuleDef.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_AUTOSARDefs;
  private ConceptPresentation props_BooleanParameterDef;
  private ConceptPresentation props_ChoiceContainerDef;
  private ConceptPresentation props_ContainerDef;
  private ConceptPresentation props_DefCollection;
  private ConceptPresentation props_DefinitionsEntry;
  private ConceptPresentation props_EnumParameterDef;
  private ConceptPresentation props_IntegerParameterDef;
  private ConceptPresentation props_ModuleDef;
  private ConceptPresentation props_Package;
  private ConceptPresentation props_ParamConfContainerDef;
  private ConceptPresentation props_ParameterDef;
  private ConceptPresentation props_RefereneceDef;
  private ConceptPresentation props_TextualParameterDef;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AUTOSARDefs:
        if (props_AUTOSARDefs == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("AUTOSARDefs");
          props_AUTOSARDefs = cpb.create();
        }
        return props_AUTOSARDefs;
      case LanguageConceptSwitch.BooleanParameterDef:
        if (props_BooleanParameterDef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("BooleanParameterDef");
          props_BooleanParameterDef = cpb.create();
        }
        return props_BooleanParameterDef;
      case LanguageConceptSwitch.ChoiceContainerDef:
        if (props_ChoiceContainerDef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ChoiceContainerDef");
          props_ChoiceContainerDef = cpb.create();
        }
        return props_ChoiceContainerDef;
      case LanguageConceptSwitch.ContainerDef:
        if (props_ContainerDef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ContainerDef");
          props_ContainerDef = cpb.create();
        }
        return props_ContainerDef;
      case LanguageConceptSwitch.DefCollection:
        if (props_DefCollection == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("DefCollection");
          props_DefCollection = cpb.create();
        }
        return props_DefCollection;
      case LanguageConceptSwitch.DefinitionsEntry:
        if (props_DefinitionsEntry == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("DefinitionsEntry");
          props_DefinitionsEntry = cpb.create();
        }
        return props_DefinitionsEntry;
      case LanguageConceptSwitch.EnumParameterDef:
        if (props_EnumParameterDef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("EnumParameterDef");
          props_EnumParameterDef = cpb.create();
        }
        return props_EnumParameterDef;
      case LanguageConceptSwitch.IntegerParameterDef:
        if (props_IntegerParameterDef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("IntegerParameterDef");
          props_IntegerParameterDef = cpb.create();
        }
        return props_IntegerParameterDef;
      case LanguageConceptSwitch.ModuleDef:
        if (props_ModuleDef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ModuleDef");
          props_ModuleDef = cpb.create();
        }
        return props_ModuleDef;
      case LanguageConceptSwitch.Package:
        if (props_Package == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Package");
          props_Package = cpb.create();
        }
        return props_Package;
      case LanguageConceptSwitch.ParamConfContainerDef:
        if (props_ParamConfContainerDef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ParamConfContainerDef");
          props_ParamConfContainerDef = cpb.create();
        }
        return props_ParamConfContainerDef;
      case LanguageConceptSwitch.ParameterDef:
        if (props_ParameterDef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ParameterDef");
          props_ParameterDef = cpb.create();
        }
        return props_ParameterDef;
      case LanguageConceptSwitch.RefereneceDef:
        if (props_RefereneceDef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("RefereneceDef");
          props_RefereneceDef = cpb.create();
        }
        return props_RefereneceDef;
      case LanguageConceptSwitch.TextualParameterDef:
        if (props_TextualParameterDef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TextualParameterDef");
          props_TextualParameterDef = cpb.create();
        }
        return props_TextualParameterDef;
    }
    return null;
  }
}
